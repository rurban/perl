If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see F<pod/perlpod.pod>) which is
specially designed to be readable as is.

=head1 NAME

perlmsys - Perl for msys, cross-compile to MINGW

=head1 SYNOPSIS

This document will help you configure, make, test and install Perl
on MSYS for MINGW; building your own perl on windows with gcc, similar 
to vanilla and strawberry perl as described in L<perlwin32>, but in a 
bash shell with normal Configure and its options.

=head1 MSYS

MSYS is in short the "Minimum SYStem" development shell for MINGW, 
to create packages for the MINGW Windows environment. Pre-built perl 
packages exist for 5.6 and 5.8.8, to be installed with C<mingw-get perl>.
See L<www.mingw.org>.

A MSYS perl is similar to a vanilla perl by Adam Kennedy, and is built similar
to a normal perl contrary to the description in README.win32, very much like
Perl on Cygwin or Linux. Contrary to Cygwin it will depend on the Microsoft 
runtime libraries, and during building it will use it's own cygwin alike 
libc library F</usr/lib/libmsys-1.0.dll.a>.

Think of MSYS as the cross-compiler to MINGW. The resulting perl will be used
in a mingw shell or even F<cmd.exe>.

=head1 PREREQUISITES FOR COMPILING PERL ON MSYS

=head2 MSYS Configuration

=over 4

=item INSTALLATION of MSYS

Follow the link on L<http://www.mingw.org> to B<Updated MinGW/MSys Installers>

Get B<mingw-get-inst>, the GUI wrapper over B<mingw-get>.

During mingw-get-inst select the items marked with (*)

  MinGW Compiler Suite
      C Compiler             optional (*)
      C++ Compiler           optional 
      Fortran Compiler       optional
      ObjC Compiler          optional
   MSYS Basic System         optional (*)
   MinGW Developer Toolkit   optional (*)

=item MSYS Shell, not MINGW

MSYS is very similar to MINGW, with just 2 path changes. Be sure to start the shell called
"MSYS Shell" on your desktop. 
E.g check the title of your shell if it contains B<MSYS:> and not B<MINGW32:> 
and ensure that /bin comes before /mingw/bin in your PATH.

  $ echo $PATH
  ~/bin:.:/usr/local/bin:/bin:/mingw/bin:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem  

=item PREREQUISITES for Installing Perl 5.8.8

To install or upgrade:

	mingw-get update

	mingw-get install msys-perl-bin
	mingw-get install msys-perl-man   (optional)
	mingw-get install msys-perl-html  (optional)
	mingw-get install msys-perl-doc   (optional)
	mingw-get install msys-perl-lic   (optional)

Obviously, you may need to use 'mingw-get upgrade' instead of 
'mingw-get install' if you do have msys-perl already installed.

=item PREREQUISITES for Building Perl

To install or upgrade:

	mingw-get update
	mingw-get install msys-system-builder

=back

=head1 CONFIGURE PERL ON MSYS

The default options gathered by Configure with the assistance of
F<hints/msys.sh> will build a Perl that supports dynamic loading,
which requires a shared F<perl5*.dll>.

This will run Configure and keep a record:

  ./Configure 2>&1 | tee log.configure

If you are willing to accept all the defaults run Configure with B<-de>.
However, several useful customizations are available.

=head2 Stripping Perl Binaries on MSYS

It is possible to strip the EXEs and DLLs created by the build process.
The resulting binaries will be significantly smaller.  If you want the
binaries to be stripped, you can either add a B<-s> option when Configure
prompts you,

  Any additional ld flags (NOT including libraries)? [none] -s
  Any special flags to pass to g++ to create a dynamically loaded library?
  [none] -s
  Any special flags to pass to gcc to use dynamic linking? [none] -s

or you can edit F<hints/msys.sh> and uncomment the relevant variables
near the end of the file.

=head2 Optional Libraries for Perl on MSYS

Several Perl functions and modules depend on the existence of
some optional libraries.  Configure will find them if they are
installed in one of the directories listed as being used for library
searches.  Pre-built packages for most of these are available from
the MSYS installer.

=over 4

=item * C<-lcrypt>

The crypt package distributed with MSYS is a Linux compatible 56-bit
DES crypt port by Corinna Vinschen.

Alternatively, the crypt libraries in GNU libc have been ported to MSYS.

=item * C<-lgdbm_compat> (C<use GDBM_File>)

GDBM is available for MSYS.

NOTE: The GDBM library only works on NTFS partitions.

=item * C<-ldb> (C<use DB_File>)

BerkeleyDB is available for MSYS.

NOTE: The BerkeleyDB library only completely works on NTFS partitions.

=back

=head2 Configure-time Options for Perl on MSYS

The F<INSTALL> document describes several Configure-time options.  Some of
these will work with MSYS, others are not yet possible.  Also, some of
these are experimental.  You can either select an option when Configure
prompts you or you can define (undefine) symbols on the command line.

=over 4

=item * C<-Uusedl>

Undefining this symbol forces Perl to be compiled statically.

=item * C<-Dusemymalloc>

By default Perl does not use the C<malloc()> included with the Perl source,
because it was slower and not entirely thread-safe.  If you want to force
Perl to build with the old -Dusemymalloc define this.

=item * C<-Dusemultiplicity>

Multiplicity is required when embedding Perl in a C program and using
more than one interpreter instance.  This is only required when you build
a not-threaded perl with C<-Uuseithreads>.

=item * C<-Uuse64bitint>

By default Perl uses 64 bit integers.  If you want to use smaller 32 bit
integers, define this symbol.

=item * C<-Duselongdouble>

I<gcc> supports long doubles (12 bytes).  However, several additional
long double math functions are necessary to use them within Perl
(I<{atan2, cos, exp, floor, fmod, frexp, isnan, log, modf, pow, sin, sqrt}l,
strtold>).

=item * C<-Uuseithreads>

Define this symbol if you want a not-threaded faster perl.

=item * C<-Duselargefiles>

MSYS uses 64-bit integers for internal size and position calculations,
this will be correctly detected and defined by Configure.

=item * C<-Dmksymlinks>

Symlinks are not supported with MSYS and MINGW.

=back

=head2 Suspicious Warnings on MSYS

You may see some messages during Configure that seem suspicious.

=over 4

=item * Win9x and C<d_eofnblk>

Win9x does not correctly report C<EOF> with a non-blocking read on a
closed pipe.  You will see the following messages:

  But it also returns -1 to signal EOF, so be careful!
  WARNING: you can't distinguish between EOF and no data!

  *** WHOA THERE!!! ***
      The recommended value for $d_eofnblk on this machine was "define"!
      Keep the recommended value? [y]

At least for consistency with WinNT, you should keep the recommended
value.

=item * Compiler/Preprocessor defines

The following error occurs because of the MSYS C<#define> of
C<_LONG_DOUBLE>:

  Guessing which symbols your C compiler and preprocessor define...
  try.c:<line#>: missing binary operator

This failure does not seem to cause any problems.  With older gcc
versions, "parse error" is reported instead of "missing binary
operator".

=back

=head1 MAKE ON MSYS

Simply run I<make> and wait:

  make 2>&1 | tee log.make

=head1 TEST ON MSYS

There are two steps to running the test suite:

  make test 2>&1 | tee log.make-test

  cd t; ./perl harness 2>&1 | tee ../log.harness

The same tests are run both times, but more information is provided when
running as C<./perl harness>.

Test results vary depending on your host system and your MSYS
configuration.  If a test can pass in some MSYS setup, it is always
attempted and explainable test failures are documented.  It is possible
for Perl to pass all the tests, but it is more likely that some tests
will fail for one of the reasons listed below.

=head2 File Permissions on MSYS

UNIX file permissions are based on sets of mode bits for
{read,write,execute} for each {user,group,other}. By default MSYS
only tracks the Win32 read-only attribute represented as the UNIX file
user write bit (files are always readable, files are executable if they
have a F<.{com,bat,exe}> extension or begin with C<#!>, directories are
always readable and executable). 

  Failed Test           List of failed
  ------------------------------------
  io/fs.t               5, 7, 9-10
  lib/anydbm.t          2
  lib/db-btree.t        20
  lib/db-hash.t         16
  lib/db-recno.t        18
  lib/gdbm.t            2
  lib/ndbm.t            2
  lib/odbm.t            2
  lib/sdbm.t            2
  op/stat.t             9, 20 (.tmp not an executable extension)

=head2 NDBM_File and ODBM_File do not work on FAT filesystems

Do not use NDBM_File or ODBM_File on FAT filesystem.  They can be
built on a FAT filesystem, but many tests will fail:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

If you intend to run only on FAT (or if using AnyDBM_File on FAT),
run Configure with the -Ui_ndbm and -Ui_dbm options to prevent
NDBM_File and ODBM_File being built.

With NTFS there should be no problems even if perl was built on FAT.

=head2 C<fork()> failures in io_* tests

A C<fork()> failure may result in the following tests failing:

  ext/IO/lib/IO/t/io_multihomed.t
  ext/IO/lib/IO/t/io_sock.t
  ext/IO/lib/IO/t/io_unix.t

See comment on fork in L</Miscellaneous> below.

=head1 Specific features of the MSYS port

=head2 Script Portability on MSYS

MSYS is not as good as Cygwin providing UNIX-like semantics on top of
Win32 systems.  However, in addition to the items noted above, there are
some differences that you should know about.  This is a very brief guide
to portability, more information can be found in the MINGW documentation.

=over 4

=item * Pathnames

MSYS pathnames are separated by forward (F</>) or backward (F<\\>) slashes. 
Universal Naming Codes (F<//UNC>) are also supported.

File names are case insensitive, but case preserving.  A pathname that
contains a backslash or drive letter is a Win32 pathname, and not
subject to the translations applied to POSIX style pathnames.

=item * Text/Binary

MSYS always uses crlf for text files, there's no binary mount option as on Cygwin.

C<lseek()>, C<tell()> and C<sysseek()> only work with files opened in binary
mode.

=item * PerlIO

PerlIO overrides the default MSYS Text/Binary behaviour.  A file will
always be treated as binary, regardless of the mode of the mount it lives
on, just like it is in UNIX.  So CR/LF translation needs to be requested in
either the C<open()> call like this:

  open(FH, ">:crlf", "out.txt");

which will do conversion from LF to CR/LF on the output, or in the
environment settings (add this to your .bashrc):

  export PERLIO=crlf

which will pull in the crlf PerlIO layer which does LF -> CRLF conversion
on every output generated by perl.

=item * rebase errors on fork or system

Using C<fork()> or C<system()> out to another perl after loading multiple dlls
may result on a DLL baseaddress conflict. The internal cygwin-derived error
looks like like the following:

  0 [main] perl 8916 child_info_fork::abort: data segment start: parent
  (0xC1A000) != child(0xA6A000)

or:

  183 [main] perl 3588 C:\mingw\bin\perl.exe: *** fatal error - unable to remap C:\mingw\bin\cygsvn_subr-1-0.dll to same address as parent(0x6FB30000) != 0x6FE60000
  46 [main] perl 3488 fork: child 3588 - died waiting for dll loading, errno11

See L<http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures>
It helps if not too many DLLs are loaded in memory so the available address space is larger,
e.g. stopping the MS Internet Explorer might help.

=item * C<chown()>

On WinNT C<chown()> can change a file's user and group IDs.  On Win9x C<chown()>
is a no-op, although this is appropriate since there is no security model.

=item * Miscellaneous

File locking using the C<F_GETLK> command to C<fcntl()> is a stub that
returns C<ENOSYS>.

Win9x can not C<rename()> an open file (although WinNT can).

Inplace editing C<perl -i> of files doesn't work without doing a backup
of the file being edited C<perl -i.bak> because of windowish restrictions,
therefore Perl adds the suffix C<.bak> automatically if you use C<perl -i>
without specifying a backup extension.

=back

=head1 INSTALL PERL ON MSYS

This will install Perl.

  make install 2>&1 | tee log.make-install

NOTE: If C<STDERR> is redirected C<make install> will B<not> prompt
you to install I<perl> into F</usr/bin>.

You may need to be in the I<Administrators> group to run C<make install>. 
If you are not, you must have write access to the directories in question.

Information on installing the Perl documentation in HTML format can be
found in the F<INSTALL> document.

=back

=head1 BUGS ON MSYS

Support for swapping real and effective user and group IDs is unsupported.

=head1 AUTHORS

Reini Urban <rurban@cpan.org>,

=head1 HISTORY

Last updated: 2012-02-25
