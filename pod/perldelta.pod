=encoding utf8

=for comment
This has been completed up to 7fd683ff3c3, except for:
04777d295957ad270188e4debf51b523e07cc5b0
c565ab54dc649bb62cd4d57149d7b2abb21df5f3
1c8d11ca3d0ce8bc11562f159b94c2c7e62dea6c
51698cb360d5bba06e12496ef9c7bf82e3352b71
0c4d3b5ea916cf640ea163c5a6bcffefade55a1b

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.13.7

=head1 DESCRIPTION

This document describes differences between the 5.13.6 release and
the 5.13.7 release.

If you are upgrading from an earlier release such as 5.13.5, first read
L<perl5136delta>, which describes differences between 5.13.5 and
5.13.6.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 Single term prototype

The C<+> prototype is a special alternative to C<$> that will act like
C<\[@%]> when given a literal array or hash variable, but will otherwise
force scalar context on the argument.  This is useful for functions which
should accept either a literal array or an array reference as the argument:

    sub smartpush (+@) {
        my $aref = shift;
        die "Not an array or arrayref" unless ref $aref eq 'ARRAY';
        push @$aref, @_;
    }

When using the C<+> prototype, your function must check that the argument
is of an acceptable type.

=head2 C<use re '/flags';>

The C<re> pragma now has the ability to turn on regular expression flags
till the end of the lexical scope:

    use re '/x';
    "foo" =~ / (.+) /;  # /x implied

See L<re/'/flags' mode> for details.

=head2 Statement labels can appear in more places

Statement labels can now occur before any type of statement or declaration,
such as C<package>.

=head2 C<use feature "unicode_strings"> now applies to more regex matching

Another chunk of the L<perlunicode/The "Unicode Bug"> is fixed in this
release.  Now, regular expressions compiled within the scope of the
"unicode_strings" feature (or under the "u" regex modifier (specifiable
currently only with infix notation C<(?u:...)> or via C<use re '/u'>)
will match the same whether or not the target string is encoded in utf8,
with regard to C<[[:posix:]]> character classes

Work is underway to add the case sensitive matching to the control of
this feature, but was not complete in time for this dot release.

=head2 Array and hash container functions accept references

All built-in functions that operate directly on array or hash
containers now also accept hard references to arrays or hashes:

  |----------------------------+---------------------------|
  | Traditional syntax         | Terse syntax              |
  |----------------------------+---------------------------|
  | push @$arrayref, @stuff    | push $arrayref, @stuff    |
  | unshift @$arrayref, @stuff | unshift $arrayref, @stuff |
  | pop @$arrayref             | pop $arrayref             |
  | shift @$arrayref           | shift $arrayref           |
  | splice @$arrayref, 0, 2    | splice $arrayref, 0, 2    |
  | keys %$hashref             | keys $hashref             |
  | keys @$arrayref            | keys $arrayref            |
  | values %$hashref           | values $hashref           |
  | values @$arrayref          | values $arrayref          |
  | ($k,$v) = each %$hashref   | ($k,$v) = each $hashref   |
  | ($k,$v) = each @$arrayref  | ($k,$v) = each $arrayref  |
  |----------------------------+---------------------------|

This allows these built-in functions to act on long dereferencing chains
or on the return value of subroutines without needing to wrap them in
C<@{}> or C<%{}>:

  push @{$obj->tags}, $new_tag;  # old way
  push $obj->tags,    $new_tag;  # new way

  for ( keys %{$hoh->{genres}{artists}} ) {...} # old way 
  for ( keys $hoh->{genres}{artists}    ) {...} # new way 

For C<push>, C<unshift> and C<splice>, the reference will auto-vivify
if it is not defined, just as if it were wrapped with C<@{}>.

Calling C<keys> or C<values> directly on a reference gives a substantial
performance improvement over explicit dereferencing.

For C<keys>, C<values>, C<each>, when overloaded dereferencing is
present, the overloaded dereference is used instead of dereferencing the
underlying reftype.  Warnings are issued about assumptions made in the
following three ambiguous cases:

  (a) If both %{} and @{} overloading exists, %{} is used
  (b) If %{} overloading exists on a blessed arrayref, %{} is used
  (c) If @{} overloading exists on a blessed hashref, @{} is used

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX. If any
    exist, they are bugs and reports are welcome.

[ List each incompatible change as a =head2 entry ]

=head2 Dereferencing typeglobs

If you assign a typeglob to a scalar variable:

    $glob = *foo;

the glob that is copied to C<$glob> is marked with a special flag
indicating that the glob is just a copy. This allows subsequent assignments
to C<$glob> to overwrite the glob. The original glob, however, is
immutable.

Many Perl operators did not distinguish between these two types of globs.
This would result in strange behaviour in edge cases: C<untie $scalar>
would do nothing if the last thing assigned to the scalar was a glob
(because it treated it as C<untie *$scalar>, which unties a handle).
Assignment to a glob slot (e.g., C<(*$glob) = \@some_array>) would simply
assign C<\@some_array> to C<$glob>.

To fix this, the C<*{}> operator (including the C<*foo> and C<*$foo> forms)
has been modified to make a new immutable glob if its operand is a glob
copy. Various operators that make a distinction between globs and scalars
have been modified to treat only immutable globs as globs.

This causes an incompatible change in code that assigns a glob to the
return value of C<*{}> when that operator was passed a glob copy. Take the
following code, for instance:

    $glob = *foo;
    *$glob = *bar;

The C<*$glob> on the second line returns a new immutable glob. That new
glob is made an alias to C<*bar>. Then it is discarded.

The upside to this incompatible change is that bugs
L<[perl #77496]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77496>,
L<[perl #77502]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77502>,
L<[perl #77508]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77508>,
L<[perl #77688]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77688>,
and
L<[perl #77812]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77812>,
and maybe others, too, have been fixed.

See L<http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> for even
more detail.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

The following modules were added by the C<Unicode::Collate> 
upgrade from 0.63 to 0.65. See below for details.

C<Unicode::Collate::CJK::Big5>

C<Unicode::Collate::CJK::GB2312>

C<Unicode::Collate::CJK::JISX0208>

C<Unicode::Collate::CJK::Korean>

C<Unicode::Collate::CJK::Pinyin>

C<Unicode::Collate::CJK::Stroke>

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

C<Archive::Extract> has been upgraded from 0.44 to 0.46

Resolves an issue with NetBSD-current and its new unzip 
executable.

=item *

C<B> has been upgraded from 1.24 to 1.25.

=item *

C<B::Deparse> has been upgraded from 0.99 to 1.01.

It fixes deparsing of C<our> followed by a variable with funny characters
(as permitted under the C<utf8> pragma)
L<[perl #33752]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=33752>.

=item *

C<CGI> has been upgraded from 3.49 to 3.50

This provides the following security fixes: the MIME boundary in 
multipart_init is now random and improvements to the handling of 
newlines embedded in header values.

The documentation for param_fetch() has been corrected and clarified.

=item *

C<CPAN> has been upgraded from 1.94_61 to 1.94_62

=item *

C<CPANPLUS> has been upgraded from 0.9007 to 0.9010

Fixes for the SQLite source engine and resolving of issues with the
testsuite when run under local::lib and/or cpanminus

=item *

C<CPANPLUS::Dist::Build> has been upgraded from 0.48 to 0.50

=item *

C<DynaLoader> has been upgraded from 1.10 to 1.11.

It fixes a buffer overflow when passed a very long file name.

=item *

C<ExtUtils::Constant> has been upgraded from 0.22 to 0.23.

=item *

C<Fcntl> has been upgraded from 1.09 to 1.10.

=item *

C<File::Fetch> has been upgraded from 0.24 to 0.28

C<HTTP::Lite> is now supported for 'http' scheme.

The C<fetch> utility is supported on FreeBSD, NetBSD and
Dragonfly BSD for the C<http> and C<ftp> schemes.

=item *

C<File::Glob> has been upgraded from 1.09 to 1.10.

=item *

C<GDBM_File> has been upgraded from 1.11 to 1.12.

This fixes a memory leak when DBM filters are used.

=item *

C<Hash::Util> has been upgraded from 0.09 to 0.10.

=item *

C<Hash::Util::FieldHash> has been upgraded from 1.05 to 1.06.

=item *

C<I18N::Langinfo> has been upgraded from 0.06 to 0.07.

=item *

C<Locale::Maketext> has been upgraded from 1.16 to 1.17.

=item *

C<Math::BigInt> has been upgraded from 1.97 to 1.98.

=item *

C<Math::BigInt::FastCalc> has been upgraded from 0.22 to 0.24.

=item *

C<mro> has been upgraded from 1.04 to 1.05.

=item *

C<NDBM_File> has been upgraded from 1.09 to 1.10.

This fixes a memory leak when DBM filters are used.

=item *

C<ODBM_File> has been upgraded from 1.08 to 1.09.

This fixes a memory leak when DBM filters are used.

=item *

C<parent> has been upgraded from 0.223 to 0.224

=item *

C<POSIX> has been upgraded from 1.21 to 1.22.

=item *

C<re> has been upgraded from 0.13 to 0.14, for the sake of the new
C<use re "/flags"> pragma.

=item *

C<Safe> has been upgraded from 2.28 to 2.29.

It adds C<&version::vxs::VCMP> to the default share.

=item *

C<SDBM_File> has been upgraded from 1.07 to 1.08.

=item *

C<SelfLoader> has been upgraded from 1.17 to 1.18.

It now works in taint mode
L<[perl #72062]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=72062>.

=item *

C<Socket> has been upgraded from 1.90 to 1.91.

=item *

C<Sys::Hostname> has been upgraded from 1.13 to 1.14.

=item *

C<Unicode::Collate> has been upgraded from 0.63 to 0.66

This release newly adds locales C<ja> C<ko> and C<zh> and its variants 
( C<zh__big5han>, C<zh__gb2312han>, C<zh__pinyin>, C<zh__stroke> ).

The following modules have been added:

C<Unicode::Collate::CJK::Big5> for C<zh__big5han> which makes 
tailoring of CJK Unified Ideographs in the order of CLDR's big5han ordering.

C<Unicode::Collate::CJK::GB2312> for C<zh__gb2312han> which makes
tailoring of CJK Unified Ideographs in the order of CLDR's gb2312han ordering.

C<Unicode::Collate::CJK::JISX0208> which makes tailoring of 6355 kanji 
(CJK Unified Ideographs) in the JIS X 0208 order.

C<Unicode::Collate::CJK::Korean> which makes tailoring of CJK Unified Ideographs 
in the order of CLDR's Korean ordering.

C<Unicode::Collate::CJK::Pinyin> for C<zh__pinyin> which makes
tailoring of CJK Unified Ideographs in the order of CLDR's pinyin ordering.

C<Unicode::Collate::CJK::Stroke> for C<zh__stroke> which makes
tailoring of CJK Unified Ideographs in the order of CLDR's stroke ordering.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

L<perlvar> reorders the variables and groups them by topic. Each variable
introduced after Perl 5.000 notes the first version in which it is 
available. L<perlvar> also has a new section for deprecated variables to
note when they were removed.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=over

=item *

Array and hash slices in scalar context are now documented in L<perldata>.

=item *

L<perlform> and L<perllocale> have been corrected to state that
C<use locale> affects formats.

=back

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry ]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=over 4

=item *

XXX

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item Windows

Directory handles are now properly cloned when threads are created. In perl
5.13.6, child threads simply stopped inheriting directory handles. In
previous versions, threads would share handles, resulting in crashes.

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each test improvement as a =item entry ]

=over 4

=item *

C<lex_start> has been added to the API, but is considered experimental.

=item *

A new C<parse_block> function has been added to the API
L<[perl #78222]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78222>.

=item *

A new, experimental API has been added for accessing the internal
structure that Perl uses for C<%^H>. See the functions beginning with
C<cophh_> in L<perlapi>.

=item *

A stash can now have a list of effective names in addition to its usual
name. The first effective name can be accessed via the C<HvENAME> macro,
which is now the recommended name to use in MRO linearisations (C<HvNAME>
being a fallback if there is no C<HvENAME>).

These names are added and deleted via C<hv_ename_add> and
C<hv_ename_delete>. These two functions are I<not> part of the API.

=item *

The way the parser handles labels has been cleaned up and refactored. As a
result, the C<newFOROP()> constructor function no longer takes a parameter
stating what label is to go in the state op.

=item *

The C<newWHILEOP()> and C<newFOROP()> functions no longer accept a line
number as a parameter.

=item *

A new C<parse_barestmt()> function has been added, for parsing a statement
without a label.

=item *

A new C<parse_label()> function has been added, that parses a statement
labels, separate from statements.

=item *

The C<CvSTASH()> macro can now only be used as an rvalue. C<CvSTASH_set()>
has been added to replace assignment to C<CvSTASH()>. This is to ensure
that backreferences are handled properly. These macros are not part of the
API.

=item *

The C<op_scope()> and C<op_lvalue()> functions have been added to the API,
but are considered experimental.

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

The C<parse_stmt> C function added in earlier in the 5.13.x series has been
fixed to work with statements ending with C<}>
L<[perl #78222]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78222>.

=item *

The C<parse_fullstmt> C function added in 5.13.5 has been fixed to work
when called while an expression is being parsed.

=item *

Characters in the Latin-1 non-ASCII range (0x80 to 0xFF) used not to match
themselves if the string happened to be UTF8-encoded internally, the
regular expression was not, and the character in the regular expression was
inside a repeated group (e.g.,
C<Encode::decode_utf8("\303\200") =~ /(\xc0)+/>)
L<[perl #78464]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78464>.

=item *

The C<(?d)> regular expression construct now overrides a previous C<(?u)>
or C<use feature "unicode_string">
L<[perl #78508]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78508>.

=item *

A memory leak in C<do "file">, introduced in perl 5.13.6, has been fixed
L<[perl #78488]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78488>.

=item *

Various bugs related to typeglob dereferencing have been fixed. See
L</Dereferencing typeglobs>, above.

=item *

The C<SvPVbyte> function available to XS modules now calls magic before
downgrading the SV, to avoid warnings about wide characters
L<[perl #72398]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=72398>.

=item *

The C<=> operator used to ignore magic (e.g., tie methods) on its
right-hand side if the scalar happened to hold a typeglob. This could
happen if a typeglob was the last thing returned from or assigned to a tied
scalar
L<[perl #77498]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77498>.

=item *

C<sprintf> was ignoring locales when called with constant arguments
L<[perl #78632]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78632>.

=item *

A non-ASCII character in the Latin-1 range could match both a Posix
class, such as C<[[:alnum:]]>, and its inverse C<[[:^alnum:]]>.  This is
now fixed for regular expressions compiled under the C<"u"> modifier.
See L</C<use feature "unicode_strings"> now applies to more regex matching>.
L<[perl #18281]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=18281>.

=item *

Concatenating long strings under C<use encoding> no longer causes perl to
crash
L<[perl #78674]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78674>.

=item *

Typeglob assignments would crash if the glob's stash no longer existed, if
the glob assigned to was named 'ISA' or the glob on either side of the
assignment contained a subroutine.

=item *

Calling C<< ->import >> on a class lacking an import method could corrupt the stack result in strange behaviour. For instance,

  push @a, "foo", $b = bar->import;

would assign 'foo' to C<$b>
L<[perl #63790]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=63790>.

=item *

Creating an alias to a package when that package had been detached from the
symbol table would result in corrupted isa caches
L<[perl #77358]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=77358>.

=item *

C<.=> followed by C<< <> >> or C<readline> would leak memory if C<$/>
contained characters beyond the octet range and the scalar assigned to
happened to be encoded as UTF8 internally
L<[perl #72246]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=72246>.

=item *

The C<recv> function could crash when called with the MSG_TRUNC flag
L<[perl #75082]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=75082>.

=item *

Evaluating a simple glob (like C<*a>) was calling get-magic on the glob,
even when its contents were not being used
L<[perl #78580]|http://rt.perl.org/rt3/Public/Bug/Display.html?id=78580>.

This bug was introduced in 5.13.2 and did not affect earlier perl versions.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

Randy Kobes, creator of the kobesearch alternative to search.cpan.org and
contributor/maintainer to several core Perl toolchain modules, passed away
on September 18, 2010 after a battle with lung cancer.  His contributions
to the Perl community will be missed.

=head1 Acknowledgements

XXX The list of people to thank goes here.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
