=encoding utf8

=for comment
This has been completed up to 0aae26c14, except for:
803e389	rurban	CYG17 utf8 paths
d9298c1	rurban	mymalloc isn't thread safe

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.15.8

=head1 DESCRIPTION

This document describes differences between the 5.15.7 release and
the 5.15.8 release.

If you are upgrading from an earlier release such as 5.15.6, first read
L<perl5157delta>, which describes differences between 5.15.6 and
5.15.7.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 Improved ability to mix locales and Unicode, including UTF-8 locales

An optional parameter has been added to C<use locale>

 use locale ':not_characters';

which tells Perl to use all but the C<LC_CTYPE> and C<LC_COLLATE>
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This allows locales and Unicode to be seamlessly mixed,
including the increasingly frequent UTF-8 locales.  When using this
hybrid form of locales, the C<:locale> layer to the L<open> pragma can
be used to interface with the file system, and there are CPAN modules
available for ARGV and environment variable conversions.

Full details are in L<perllocale>.

=head2 New function C<fc> and corresponding escape sequence C<\F> for Unicode foldcase

Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression C</i> matching.  Now it is available
explicitly through the new C<fc> function call (enabled by
S<C<"use feature 'fc'">>, or C<use v5.16>, or explicitly callable via
C<CORE::fc>) or through the new C<\F> sequence in double-quotish
strings.

Full details are in L<perlfunc/fc>.

=head2 C<_> in subroutine prototypes

The C<_> character in subroutine prototypes is now allowed before C<@> or
C<%>.

=head1 Supports (I<almost>) Unicode 6.1

Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin-1 range, PILCROW SIGN and SECTION SIGN, has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (CIRCLED NUMBER TEN ON BLACK SQUARE
through CIRCLED NUMBER EIGHTY ON BLACK SQUARE) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and as a consequence of
other changes in 6.1, the Perl regular expression construct C<\X> now
works differently for some characters in Thai and Lao.

New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross indexed in
L<perluniprops>.

The return value of C<charnames::viacode> is affected by other changes.
One of these is that the preferred name (which is what C<viacode>
returns) for the character at U+2118 has been changed from SCRIPT CAPITAL P
to WEIERSTRASS ELLIPTIC FUNCTION.  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be "BELL", which conflicts with the long
standing industry use of (and Unicode's recommendation to use) that name
to mean the ASCII control character at U+0007.  As a result, that name
has been deprecated in Perl since v5.14; and any use of it will raise a
warning message (unless turned off).  The name "ALERT" is now the
preferred name for this code point, with "BEL" being an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't quite
implement all of Unicode 6.1), but starting in v5.18, BELL will mean
this character, and not U+0007.

Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all the generally accepted
names and abbreviations for control characters, whereas previously it
didn't.  This means that all the names that Perl had previously
deprecated (except BELL) are no longer deprecated, such as FILE
SEPARATOR.  Also, the names for four rarely used characters are subtly
different (a hyphen instead of a space) than before:

 Code point    Old Name         New Name
   U+008E    SINGLE-SHIFT 2   SINGLE-SHIFT-2
   U+008F    SINGLE-SHIFT 3   SINGLE-SHIFT-3
   U+0091    PRIVATE USE 1    PRIVATE USE-1
   U+0092    PRIVATE USE 2    PRIVATE USE-2

Perl will accept either name as input, but C<charnames::viacode> now
returns the new name.

Additional name abbreviations are accepted:
SP for SPACE;
TAB for CHARACTER TABULATION;
NEW LINE, END OF LINE, NL, and EOL for LINE FEED;
LOCKING-SHIFT ONE for SHIFT OUT;
LOCKING-SHIFT ZERO for SHIFT IN;
and ZWNBSP for ZERO WIDTH NO-BREAK SPACE.

More details on this version of Unicode are provided in
L<http://www.unicode.org/versions/Unicode6.1.0/>.

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs, and we request that you submit a
    report.  See L</Reporting Bugs> below.

[ List each incompatible change as a =head2 entry ]

=head2 Special blocks called in void context

Special blocks (C<BEGIN>, C<CHECK>, C<INIT>, C<UNITCHECK>, C<END>) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].

=head2 The C<overloading> pragma and regexp objects

With C<no overloading>, regular expression objects returned by C<qr//> are
now stringified as "Regexp=REGEXP(0xbe600d)" instead of the regular
expression itself [perl #108780].

=head2 Two XS typemap Entries removed

Two presumably unused XS typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK. If you are, against all odds,
a user of these, please see the instructions on how to regain them
in L<perlxstypemap>.

=head2 Unicode 6.1 has incompatibilities with Unicode 6.0

These are detailed in L</Supports (almost) Unicode 6.1> above.

=head2 Changed returns for some properties in C<Unicode::UCD::prop_invmap()>

The return values for C<prop_invmap> have been changed for some
properties to make the returned lists significantly smaller.  This
allows those lists to be searched faster.

This function was introduced earlier in the v5.15 series of releases,
and the API will not be considered stable until v5.16.

See L<Unicode::UCD/prop_invmap()> for details on the new interface.

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

The C<mmap> PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new L<PerlIO::mmap> module.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<arybase> has been upgraded from version 0.03 to version 0.04.

List slices no longer modify items on the stack belonging to outer lists
[perl #109570].

=item *

L<B> has been upgraded from version 1.33 to version 1.34.

C<B::COP> now has a C<stashflags> method, corresponding to a new internal
field added in 5.15.4 [perl #108860].

=item *

L<Carp> has been upgraded from version 1.24 to version 1.25.

It now puts a dot after the file and line number, just like errors from
C<die> [perl #106538].

=item *

L<Compress::Raw::Bzip2> has been upgraded from version 2.045 to version 2.048.

=item *

L<Compress::Raw::Zlib> has been upgraded from version 2.045 to version 2.048.

=item *

L<Compress::Zlib> has been upgraded from version 2.046 to version 2.048.

=item *

L<CPAN::Meta> has been upgraded from version 2.113640 to version 2.120351.

Work around a memory leak bug involving version objects in boolean context.

=item *

L<CPAN::Meta::YAML> has been upgraded from version 0.005 to version 0.006.

=item *

L<DB_File> has been upgraded from version 1.824 to version 1.826.

=item *

L<diagnostics> has been upgraded from version 1.27 to version 1.28.

When searching for F<perldiag.pod>, it no longer uses paths that were only
relevant on Perl 5.004 and earlier.

=item *

L<ExtUtils::ParseXS> has been upgraded from version 3.12 to version 3.15.

The new version comes with important tools for sharing typemaps between
different CPAN distributions.

=item *

L<File::Copy> has been upgraded from version 2.21 to version 2.23.

It no longer emits warnings when copying files with newlines in their names
[perl #109104].

=item *

L<IPC::Cmd> has been upgraded from version 0.72 to version 0.76.

=item *

L<Math::Complex> has been upgraded from version 1.58 to version 1.59.

This avoids a new core warning.

=item *

L<Pod::Parser> has been upgraded from version 1.37 to version 1.51.

=item *

L<Term::ReadLine> has been upgraded from version 1.07 to version 1.08.

Its C<tkRunning> method now supports L<AnyEvent> event loops, and not just
L<Tk>.  A more general mechanism has been proposed, so this may be reverted
before Perl 5.16 [perl #108470].

=item *

L<Time::HiRes>  has been upgraded from version 1.9724 to version 1.9725.

C<Time::HiRes::stat()> no longer corrupts the Perl stack.

=item *

L<Unicode::UCD> has been upgraded from version 0.39 to 0.40.

The only change is to fix a formatting error in the Pod.

=item *

L<Version::Requirements> has been upgraded from version 0.101021 to version 0.101022.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

L<Devel::DProf> which has been deprecated with 5.14 was removed.

Get it from CPAN or better use L<Devel::NYTProf> instead.

=item *

L<Shell> which has been deprecated with 5.14 was removed.

Get it from CPAN.

=item *

L<Locale::Constants> was moved to L<Locale::Codes::Constants>.

=item *

Several old perl4-style libraries which have been deprecated with
5.14 are now removed:

    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl pwd.pl
    shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<perlxstypemap>

The new manual describes the XS typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
L<perlxs> and the previously unofficial list of all core typemaps.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry that links to perldiag,
  e.g.

  =item *

  L<Invalid version object|perldiag/"Invalid version object">
]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=item *

The test suite for typemaps has been extended to cover a larger fraction of
the core typemaps.

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each change as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

C<~~> now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.

=item *

C<stat _> no longer warns about unopened filehandles [perl #71002].

=item *

C<stat> on an unopened filehandle now warns consistently, instead of
skipping the warning at times.

=item *

A change in an earlier 5.15 release caused warning hints to propagate into
C<do $file>.  This has been fixed [rt.cpan.org #72767].

=item *

Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning C<${ qr// }> to a hash element and locking it with
L<Hash::Util>.  This could result in double frees, crashes or erratic
behaviour.

=item *

In 5.15.7, some typeglobs in the CORE namespace were made read-only by
mistake.  This has been fixed [rt.cpan.org #74289].

=item *

C<-t> now works when stacked with other filetest operators [perl #77388].

=item *

Stacked filetest operators now only call FETCH once on a tied argument.

=item *

C</.*/g> would sometimes refuse to match at the end of a string that ends
with "\n".  This has been fixed [perl #109206].

=item *

Method calls whose arguments were all surrounded with C<my()> or C<our()>
(as in C<<$object->method(my($a,$b)) >>) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.  Due to lvalue fixes earlier in the 5.15.x series, it would also
prevent non-lvalue methods from being called [perl #109264].

=for comment
This bug I<did> affect earlier stable releases.  It is just the last
sentence that does not apply to 5.14.

=item *

The C<SvPVutf8> C function no longer tries to modify its argument,
resulting in errors [perl #108994].

=item *

C<SvPVutf8> now works properly with magical variables.

=item *

C<SvPVbyte> now works properly non-PVs.

=back

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX Generate this with:

  perl Porting/acknowledgements.pl v5.15.7..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
